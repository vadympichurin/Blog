{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\src\\\\Components\\\\PostDescription\\\\PostDescription.js\";\nimport React, { Component, Fragment } from 'react';\nimport { getDataCommentsAsync } from '../../redux/actions/getDataComments';\nimport { getDataPostsAsync } from '../../redux/actions/getDataPosts';\nimport { getNewComment as _getNewComment } from '../../redux/actions/getNewComment';\nimport { connect } from 'react-redux';\nimport InputComment from '../InputComment/InputComment';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport './PostDescription.css';\n\nvar PostDescription =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostDescription, _Component);\n\n  function PostDescription() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostDescription);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostDescription)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      inputValueComm: '',\n      newComment: {}\n    };\n\n    _this.onePostComments = function () {\n      return _this.props.dataComments.map(function (el) {\n        return +el.postId === +_this.props.match.params.id ? React.createElement(\"li\", {\n          className: \"comments_item\",\n          key: el.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, el.body) : null;\n      });\n    };\n\n    _this.onePost = function () {\n      return _this.props.dataPosts.map(function (el) {\n        return +el.id === +_this.props.match.params.id ? React.createElement(Fragment, {\n          key: el.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: \"onePost_title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, el.title), \" \", React.createElement(\"p\", {\n          className: \"onePost_body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, el.body)) : null;\n      });\n    };\n\n    _this.inputChange = function (event) {\n      var inputTextCom = event.target.value;\n\n      _this.setState({\n        inputValueComm: inputTextCom\n      });\n    };\n\n    _this.addComment = function (event) {\n      var newComment = {\n        postId: _this.props.match.params.id,\n        body: _this.state.inputValueComm\n      };\n\n      _this.setState({\n        newComment: newComment,\n        inputValueComm: ''\n      }, function () {\n        return newComment.body === \"\" ? null : _this.postNewComment(newComment);\n      });\n    };\n\n    _this.postNewComment = function (obj) {\n      var config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      axios.post(\"http://localhost:3001/comments\", {\n        postId: obj.postId,\n        body: obj.body\n      }, config).then(function (res) {\n        return _this.props.getNewComment(res.data);\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PostDescription, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getDataComments();\n      this.props.getDataPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var showComments = this.onePostComments();\n      var showPost = this.onePost();\n      return React.createElement(\"div\", {\n        className: \"one_post_wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(InputComment, {\n        inputChange: this.inputChange,\n        addComment: this.addComment,\n        inputValueComm: this.state.inputValueComm,\n        postNewComment: this.postNewComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), showPost, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Comments:\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, showComments));\n    }\n  }]);\n\n  return PostDescription;\n}(Component);\n\nvar MSTP = function MSTP(state) {\n  return {\n    dataPosts: state.dataPosts,\n    dataComments: state.dataComments\n  };\n};\n\nvar MDTP = function MDTP(dispatch) {\n  return {\n    getDataComments: function getDataComments() {\n      dispatch(getDataCommentsAsync());\n    },\n    getDataPosts: function getDataPosts() {\n      dispatch(getDataPostsAsync());\n    },\n    getNewComment: function getNewComment(x) {\n      dispatch(_getNewComment(x));\n    }\n  };\n};\n\nPostDescription.propTypes = {// id: PropTypes.string,\n};\nexport default connect(MSTP, MDTP)(PostDescription);","map":{"version":3,"sources":["C:\\Users\\Vadim\\Desktop\\GoIT\\-=Tasks=-\\task-blog\\front-end\\blog\\src\\Components\\PostDescription\\PostDescription.js"],"names":["React","Component","Fragment","getDataCommentsAsync","getDataPostsAsync","getNewComment","connect","InputComment","axios","PropTypes","PostDescription","state","inputValueComm","newComment","onePostComments","props","dataComments","map","el","postId","match","params","id","body","onePost","dataPosts","title","inputChange","event","inputTextCom","target","value","setState","addComment","postNewComment","obj","config","headers","post","then","res","data","catch","err","console","log","getDataComments","getDataPosts","showComments","showPost","MSTP","MDTP","dispatch","x","propTypes"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport {getDataCommentsAsync} from '../../redux/actions/getDataComments';\r\nimport {getDataPostsAsync} from '../../redux/actions/getDataPosts';\r\nimport {getNewComment} from '../../redux/actions/getNewComment';\r\n\r\nimport {connect} from 'react-redux';\r\nimport InputComment from '../InputComment/InputComment';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nimport './PostDescription.css';\r\n\r\n\r\n\r\nclass PostDescription extends Component {\r\n\r\n    state = {\r\n        inputValueComm: '',\r\n        newComment: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getDataComments();\r\n        this.props.getDataPosts();\r\n    }\r\n\r\n    onePostComments = () => {\r\n      return this.props.dataComments.map(el => +el.postId === +this.props.match.params.id ? <li className=\"comments_item\" key={el.id}>{el.body}</li> : null)\r\n    }\r\n\r\n    onePost = () => {\r\n        return this.props.dataPosts.map(el => +el.id === +this.props.match.params.id ? \r\n            (<Fragment key={el.id}><h3 className=\"onePost_title\">{el.title}</h3> <p className=\"onePost_body\">{el.body}</p></Fragment>)\r\n                : null)\r\n    }\r\n\r\ninputChange = (event) => {\r\n    let inputTextCom = event.target.value;\r\n    this.setState ({\r\n        inputValueComm: inputTextCom\r\n    })\r\n  };\r\n    \r\n      addComment = (event) => {\r\n        let newComment = {\r\n            postId: this.props.match.params.id,\r\n            body: this.state.inputValueComm,\r\n        };\r\n        this.setState (\r\n            {\r\n                newComment: newComment,\r\n                inputValueComm: '',\r\n            }, () => newComment.body === \"\" ? null : this.postNewComment(newComment)\r\n        )\r\n      };\r\n\r\n      postNewComment = (obj) => {\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        }\r\n        axios.post(\"http://localhost:3001/comments\",{postId: obj.postId, body: obj.body},config)\r\n        .then(res => this.props.getNewComment(res.data))\r\n        .catch(err => console.log(err))\r\n      }\r\n       \r\n\r\n    render () {\r\n        const showComments = this.onePostComments();\r\n        const showPost = this.onePost();\r\n\r\n    return (\r\n        <div className=\"one_post_wrapper\">\r\n            <InputComment inputChange={this.inputChange} addComment={this.addComment} inputValueComm={this.state.inputValueComm} postNewComment={this.postNewComment} />\r\n            {showPost}\r\n            <span>Comments:</span>\r\n            <ul>\r\n                {showComments}\r\n            </ul>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst MSTP = state => ({\r\n    dataPosts: state.dataPosts,\r\n    dataComments: state.dataComments,\r\n})\r\n\r\nconst MDTP = dispatch => ({\r\n    getDataComments: () => {\r\n        dispatch(getDataCommentsAsync())\r\n    },\r\n    getDataPosts: () => {\r\n        dispatch(getDataPostsAsync())\r\n    },\r\n    getNewComment: (x) => {\r\n        dispatch(getNewComment(x))\r\n    },\r\n})\r\n\r\nPostDescription.propTypes = {\r\n    // id: PropTypes.string,\r\n}\r\n\r\nexport default connect(MSTP,MDTP)(PostDescription);"]},"metadata":{},"sourceType":"module"}