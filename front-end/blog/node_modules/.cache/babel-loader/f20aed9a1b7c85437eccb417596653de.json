{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Vadim\\\\Desktop\\\\GoIT\\\\-=Tasks=-\\\\task-blog\\\\front-end\\\\blog\\\\src\\\\Components\\\\PostDescription\\\\PostDescription.js\";\nimport React, { Component, Fragment } from 'react';\nimport { getDataCommentsAsync } from '../../redux/actions/getDataComments';\nimport { connect } from 'react-redux';\nimport InputComment from '../InputComment/InputComment';\n\nvar PostDescription =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostDescription, _Component);\n\n  function PostDescription() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostDescription);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostDescription)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      inputValueComm: '',\n      newComment: {}\n    };\n\n    _this.onePostComments = function () {\n      return _this.props.dataComments.map(function (el) {\n        return +el.postId === +_this.props.id ? React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, el.body) : null;\n      });\n    };\n\n    _this.onePost = function () {\n      return _this.props.dataPosts.map(function (el) {\n        return +el.id === +_this.props.id ? React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, el.title), \" \", React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, el.body)) : null;\n      });\n    };\n\n    _this.inputChange = function (event) {\n      var inputTextCom = event.target.value;\n\n      _this.setState({\n        inputValueComm: inputTextCom\n      });\n    };\n\n    _this.addComment = function (event) {\n      event.preventDefault();\n      var newComment = {\n        body: _this.state.inputValueComm,\n        id: Date.now(),\n        postId: _this.props.id\n      };\n\n      _this.setState({\n        newComment: newComment //     prev => ({\n        //         cities: [newCity,...prev.cities],\n        //         inputValue: ''\n        //     })\n\n      });\n\n      console.log(newComment);\n    };\n\n    return _this;\n  }\n\n  _createClass(PostDescription, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      {\n        this.props.getDataComments();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          dataPosts = _this$props.dataPosts,\n          dataComments = _this$props.dataComments;\n      var showComments = this.onePostComments();\n      var showPost = this.onePost();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(InputComment, {\n        inputChange: this.inputChange,\n        addComment: this.addComment,\n        inputValueComm: this.state.inputValueComm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), showPost, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, showComments));\n    }\n  }]);\n\n  return PostDescription;\n}(Component);\n\nvar MSTP = function MSTP(state) {\n  return {\n    dataPosts: state.dataPosts,\n    dataComments: state.dataComments\n  };\n};\n\nvar MDTP = function MDTP(dispatch) {\n  return {\n    getDataComments: function getDataComments() {\n      dispatch(getDataCommentsAsync());\n    }\n  };\n};\n\nexport default connect(MSTP, MDTP)(PostDescription);","map":{"version":3,"sources":["C:\\Users\\Vadim\\Desktop\\GoIT\\-=Tasks=-\\task-blog\\front-end\\blog\\src\\Components\\PostDescription\\PostDescription.js"],"names":["React","Component","Fragment","getDataCommentsAsync","connect","InputComment","PostDescription","state","inputValueComm","newComment","onePostComments","props","dataComments","map","el","postId","id","body","onePost","dataPosts","title","inputChange","event","inputTextCom","target","value","setState","addComment","preventDefault","Date","now","console","log","getDataComments","showComments","showPost","MSTP","MDTP","dispatch"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport {getDataCommentsAsync} from '../../redux/actions/getDataComments';\r\nimport {connect} from 'react-redux';\r\nimport InputComment from '../InputComment/InputComment';\r\n\r\nclass PostDescription extends Component {\r\n\r\n    state = {\r\n        inputValueComm: '',\r\n        newComment: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        {this.props.getDataComments()}\r\n    }\r\n\r\n    onePostComments = () => {\r\n      return this.props.dataComments.map(el => +el.postId === +this.props.id ? <li>{el.body}</li> : null)\r\n    }\r\n\r\n    onePost = () => {\r\n        return this.props.dataPosts.map(el => +el.id === +this.props.id ? \r\n            (<Fragment><h3>{el.title}</h3> <p>{el.body}</p></Fragment>)\r\n                : null)\r\n    }\r\n\r\n    inputChange = (event) => {\r\n        let inputTextCom = event.target.value;\r\n        this.setState ({\r\n            inputValueComm: inputTextCom\r\n        })\r\n      };\r\n    \r\n      addComment = (event) => {\r\n        event.preventDefault();\r\n        let newComment = {\r\n          body: this.state.inputValueComm,\r\n            id: Date.now(),\r\n            postId: this.props.id,\r\n        };\r\n        this.setState (\r\n            {\r\n                newComment: newComment,\r\n                \r\n            }\r\n        //     prev => ({\r\n        //         cities: [newCity,...prev.cities],\r\n        //         inputValue: ''\r\n        //     })\r\n        )\r\n        console.log(newComment);\r\n      };\r\n       \r\n\r\n    render () {\r\n        const {id, dataPosts, dataComments} = this.props;\r\n\r\n        const showComments = this.onePostComments();\r\n\r\n        const showPost = this.onePost();\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <InputComment inputChange={this.inputChange} addComment={this.addComment} inputValueComm={this.state.inputValueComm} />\r\n\r\n        \r\n            {/* <h3>{dataComments.map(el => +el.postId === +id ? el.body : null)}</h3> */}\r\n            {/* <h3>{res}</h3> */}\r\n\r\n\r\n\r\n           {showPost}\r\n\r\n            <ul>\r\n                {showComments}\r\n            </ul>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nconst MSTP = state => ({\r\n    dataPosts: state.dataPosts,\r\n    dataComments: state.dataComments,\r\n})\r\n\r\nconst MDTP = dispatch => ({\r\n    getDataComments: () => {\r\n        dispatch(getDataCommentsAsync())\r\n    },\r\n})\r\n\r\nexport default connect(MSTP,MDTP)(PostDescription);"]},"metadata":{},"sourceType":"module"}